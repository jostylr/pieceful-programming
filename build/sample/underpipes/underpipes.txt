MostBasic: This is _"some code" and more

---
MoreComplicated: Another _':block| dude | _write | what(arg1, !dude, _near, _"far")'

---
QuotedBlock: A quoted code block in an argument: _"!dude(_'arg | dude(left, right,
_"middle | what"')"

---
RawQuote: _"('raw quote with _"some block" not read\n')"

---
ParseBackslashes: _'("dude let's quote \" and not \nSome random linebreak")'

---
TemplateString:

---
Get: 

---
Cmd: 

---
Eval: _"(~2+3, ~'2+[3,4]', ~_rock,~('dude', arg1), ~!dude(arg1),
~str(arg1),~(),~""" . The second to last is useful to eval the previous
binding. The last is useless as it evals an empty string! 

---
EvalError:  _"~"  It is looking for a matching quote. 

---
Math:  _'(#1+4^3, #latex:eval#sin(x),#, #a#_"math expression | dude" | cool)'

---
Boolean: _'?===(3, 4)' is 3 equal to 4? or _"rock | ?>=(5)" or _"?('===',3,4)" 
We also can do just a question which leads to the pipe input going to the
second slot. _`_op | ?(4, 3)`

---
Operator:  _"#2 | =+3(25,6)| =*7 | =>sin 
    | =< cos({guess:[3, 3.1],max:10,min:0})" 

Take 2 and add it to 3, 25, and 6, then multiply by 7, then throw that into sine and
finally find the inverse value for cosine using the secant method with a
starting guess of 3 and 3.1.

---
Array: _"[3, 5, 6] | merge([2, 5, 7])"

---
Object: _"{key:val, rock:_'rock bit', _rocking : !dude(action), _noval, !dude
: what}"

---
Dash:

---
Dot:

---
Comment: 

---
GetScope: 

---
StoreScope:


---
LongBit:
_"~section(this , that)"
_"echo(this, that)" 
_"dude | sub(this, _there | cmd ) " 

[]( "dir: arg1, arg2 | process | echo(_proc) | _process, _dude")

_"section | cmd( 'some text', _section | cmd2 | cmd3(#3) )"

_"get(section 1)"

_"section 1 | cmd1( this | that, there) | cmd2(this, that, there)"
 

_"section 1 | echo(_"this") | _this | _"this | with | pipes" "


All evaling is the command eval. 

_"section" section retrieved
_"~text" eval the text if function
_"~_section" get section then eval
_"!cmd"  cmd called
_"cmd()" cmd called
_"'quoted'" 
_"~'evaling'" eval'd
_"_section" section called
_"`${s.templating}`" backtick templating via an eval. s=scope is the
scope variable associated with the command context. c=context is the
overall context and there can also be an args in other eval uses though
not here. 
